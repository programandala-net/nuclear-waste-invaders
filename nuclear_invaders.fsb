( Nuclear Invaders )

  \ XXX UNDER DEVELOPMENT

\ Version 0.0.0+201602151530

\ Description

\ This game is a ZX Spectrum port (for Solo Forth:
\ http://programandala.net/en.program.solo_forth.html) of a
\ game written by Dancresp in 2013 for Jupiter ACE
\ (http://www.zonadepruebas.com/viewtopic.php?t=4231).

\ Author: Marcos Cruz (programandala.net)

\ License

\ You may do whatever you want with this work, so long as you
\ retain the copyright/authorship/acknowledgment/credit
\ notice(s) and this license in all redistributed copies and
\ derived works.  There is no warranty.

  \ History
  \
  \ 2016-02-14: Started changing the layout of the original
  \ source code.
  \
  \ 2016-02-15: Splitted all lines. Divided the code into
  \ blocks. A lot of factoring is needed.

( init )

variable tank-x
variable shoot-x
variable shoot-y  \ 0 if no shoot
variable ufo-x
variable lifes
variable phase
variable record
variable invader  \ data pointer
variable score
variable invaders

( clrscr at pause )

: clrscr  ( -- )
  2 0 at 608 spaces  ;
  \ Clear screen except the status bars.

: at  ( y x -- )  swap at-xy  ;  \ XXX TMP

: pause  ( n -- )
  0 do  200 0 do  loop  loop  ;

( .score )

: .score  ( n y x -- )
  at dup dup dup 1000 < if  [char] 0 emit  then
                  100 < if  [char] 0 emit  then
                   10 < if  [char] 0 emit  then .  ;

: rnd  ( -- n )
  15403 c@ 31 and  ;
  \ Return a random number _n_ (0..31).

( graphics )

: graphics  ( -- )
  1 3 7 13 15 5 8 4
  128 192 224 176 240 160 16 32
  1 3 7 13 15 2 10 128
  192 224 176 240 64 160 80 8
  36 47 59 63 31 8 16 32
  72 232 184 248 240 32 16 8
  4 15 27 63 63 40 6 32
  64 224 176 248 248 40 192 3
  31 63 57 63 14 25 12 192
  248 252 156 252 112 152 48 3
  31 63 57 63 6 13 48 192
  248 252 156 252 96 176 12 1
  3 3 127 255 255 255 255 0
  128 128 252 254 254 254 254 0  -->

( graphics )

  7 31 63 109 255 57 16 0
  224 248 252 182 255 156 8 4
  34 16 8 96 4 18 36 64
  136 16 32 12 32 144 72 0
  1 1 1 1 1 0 0 66
  32 71 15 30 76 135 35 2
  100 240 250 217 240 196 18 251
  251 251 0 223 223 223 0 0
  0 0 0 0 0 255 0 3
  28 35 32 33 35 33 32 224
  28 226 2 194 226 194 130 37
  47 46 38 32 28 3 0 82
  122 58 50 2 28 224 0
  12039 12255 do i c! -1 +loop ;
  \ Redefine lowercase letters as graphics.

( Instructions )

: instructions  ( -- )
  cls
  1 8 at ." nuclear invaders"
  6 4 at ." controls: left  = z"
  7 14 at ." right = x"
  8 14 at ." fire  = enter"
  14 6 at ." *press key to start*"
  21 6 at ." c scainet soft, 2013"
  begin  inkey  until  9 pause  ;

( presentation )

: presentation  ( -- )
  cls
  ."  score<1>   hi-score   score<2>"
  score @ 1 3 .score
  record @ 1 14 .score
  5 14 at ." play"
  7 8 at ." nuclear invaders"
  10 5 at ." *score advance table*"
  12 9 at ." op =? mystery"
  14 9 at ." cd =30 points"
  16 9 at ." gh =20 points"
  18 9 at ." kl=10 points"
  22 4 at ." mnmn" 13 spaces
  ." credit 00"
  begin  inkey  until  clrscr  -->

( presentation )

  21 1 at ." wwwwwwwwwwwwwwwwwwwwwwwwwwwwww"
  22 2 at ." 3"
  11 9 at ." play player<1>"
  10 0 do
    1 3 at 4 spaces  3 pause
    1 3 at ." 0000" 3 pause
  loop
  3 lifes ! 2 phase ! 0 score !  ;

( init )

: init-ufo  ( -- )  -200 ufo-x !  ;

: init
  clrscr
  15 15 phase @ - dup ufo-x ! at phase @ 2 * 2+
  dup 0 do ." v" loop
  4 ufo-x @ at 0 do ." v" loop
  3 13 do
    ufo-x @ dup i swap at ." v"
    phase @ 0 do ." xy" loop
    ." v" i 1+ swap at ." v"
    phase @ 0 do ." z{" loop
    ." v"
  -2 +loop  -->

( init )

  99 103 dup 107 dup
  3 13 do
    i 1 at dup emit dup 1+ emit i 29 at dup emit 1+ emit
  -2 +loop
  3 0 5 0 99 3 0 7
  0 103 3 0 9 0 103 3
  0 11 0 107 3 0 5 29
  99 3 0 7 29 103 3 0
  9 29 103 3 0 11 29 107
  3 0 13 29 107
  9999 10049 do  i c! -1  +loop
  init-ufo 3 tank-x ! 0 shoot-y !
  10000 invader ! 30 invaders !  ;
  \ Start screen.

( move-tank )

: move-tank  ( -- )
  tank-x @ dup
  27 < if
    inkey 120 = if  tank-x @ 1+ tank-x !  then
  then
  3 > if
    inkey 122 = if  tank-x @ 1- tank-x !  then
  then
  20 tank-x @ 1- at ."  mn " ;

( move-invader )

: move-invader  ( -- f )
  invader @ c@ 0> if
    invader @ 1+ c@ 0= if
      rnd invaders @ 5 < if 10 else 26 then
      > if 1 invader @ 1+ c! then 0

-->

( move-invader )

    else
      invader @ 10025 < if  1  else  -1  then
      dup dup invader @ 3 + c@ + invader @ 3 + c!
      invader @ 2+ c@ invader @ 3 + c@ at
      0> if  space  then
      invader @ 4 + c@ invader @ 3 + c@ 2 mod 0> if  2-  then
      dup emit 1+ emit 0< if space then
      invader @ 3 + c@ dup 14 phase @ -  =
      if  drop 1  else  15 phase @ + = if  1  else  0  then
      then
    then
  else  0  then
  invader @ 10045 = if    10000
                    else  invader @ 5 +
                    then  invader !  ;


( ufo )

: ufo  ( -- )
  ufo-x @ dup 0<
  if    1+ ufo-x !
  else  dup 27 > if     3 swap at 3 spaces init-ufo
                 else   1+ dup ufo-x ! 3 swap at ."  op"
                 then
  then  ;

( impact )

: impact  ( -- f )
  9216 shoot-y @ 32 * + shoot-x @ + c@ 32 =
  if  0
  else
    shoot-y @ 15 < if
      shoot-y @ 3 = if
        3 ufo-x @ 1+ at ." tu"
        18 12 do  i 15 beep  loop
        rnd 12 / 1+ 50 * dup 3 ufo-x @ 1+ at
        . score @ + dup score !
        1 3 .score 20 pause 3 ufo-x @ at 4 spaces
        200 ufo-x !
      else

-->

( impact )

        invaders @ 1- invaders !
        shoot-y @ 3 - 2 / shoot-x @ 15 >  if  5 +  then
        shoot-y @ dup 5 = if   drop 30
                          else 10 > if  10  else  20  then
                          then
        score @ + dup score !
        1 3 .score 1- 5 * 10000 + shoot-y !
        shoot-y @ 2+ c@ shoot-y @ 3 + c@ dup 15 < if  1+  then
        2 pick 2 pick at ." qr"
        10 100 beep at 2 spaces

-->

( impact )

        shoot-y @ dup c@ 1- swap c! shoot-y @ c@ 0> if
          0 shoot-y @ 1+ c! shoot-x @ 15 < if 0 else 29 then
          shoot-y @ 3 + c! shoot-y @ 2+ c@ shoot-y @ 3 + c@ at
          shoot-x @ 15 < if  space  then
          shoot-y @ 4 + c@ dup emit 1+ emit
        then
      then
    then  shoot-y off  1
  then  ;

( shoot )

: shoot
  shoot-y @ 0=
  if    inkey 13 = if  tank-x @ shoot-x ! 19 shoot-y !  then
  else  shoot-y @ dup shoot-x @ at space 5 <
        if    0 shoot-y !
        else  shoot-y @ 2- shoot-y ! impact 0=
              if  shoot-y @ shoot-x @ at 115 emit  then
        then
  then ;

( alive game-over next-phase )

: alive  ( -- )
  dup 22 at . dup 2 * 2+ 22 swap at 2 spaces  ;

: game-over  ( -- )
  17 11 at ." game  over"
  score @ record @ > if  score @ record !  then  ;

: alive?  ( -- f )
  100 200 do  i 20 beep  -5 +loop
  30 pause lifes @ 1- dup dup 0>
  if  alive  else  game-over  then  lifes ! 0= ;

: next-phase  ( -- )
  invaders @ 0= if
    phase @ dup 5 < if  1+  then
    phase ! 100 pause init
  then ;

( run )

: run  ( -- )
  graphics instructions
  begin  presentation
    begin  init
      begin   2 pause
              move-tank shoot ufo next-phase move-invader
      until
      alive?
    until  200 pause
  again  ;

\ vim: filetype=soloforth
