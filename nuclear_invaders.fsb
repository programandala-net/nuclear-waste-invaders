( Nuclear Invaders )

  \ XXX UNDER DEVELOPMENT

\ Version 0.0.0+201602160104

\ Description

\ This game is a ZX Spectrum port (for Solo Forth:
\ http://programandala.net/en.program.solo_forth.html) of a
\ game written by Dancresp in 2013 for Jupiter ACE
\ (http://www.zonadepruebas.com/viewtopic.php?t=4231).

  \ This version:
\ Copyright (C) 2016 Marcos Cruz (programandala.net)

  \ Original version by Dancresp:
\ Copyright (C) 2013 Scainet Soft

\ License

\ You may do whatever you want with this work, so long as you
\ retain the copyright/authorship/acknowledgment/credit
\ notice(s) and this license in all redistributed copies and
\ derived works.  There is no warranty.

  \ History: see at the end of the file.

-->

( Requirements)

only forth definitions

need roll       need inkey
need bleep      need beep>bleep
need os-chars   need os-udg
need abort"

[defined] binary  ?\ : binary  ( -- )  2 base !  ;

: debug-point  ( -- )  depth abort" depth is not zero"  ;
\ XXX TMP for debugging

-->

( Variables) debug-point

variable tank-x   \ coordinate (column)
variable shoot-x  \ coordinate (column)
variable shoot-y  \ coordinate (row), 0 if no shoot
variable ufo-x    \ coordinate (column)
variable lifes    \ counter
variable phase    \ counter
variable score    \ counter
variable record   \ max score
variable invaders \ counter
variable invader  \ data pointer

-->

( clear-arena at-yx pause ) debug-point

: at-yx  ( y x -- )  swap at-xy  ;
  \ XXX TMP -- compatibility layer for the original code

: beep  ( n1 n2 -- )  beep>bleep bleep  ;
  \ XXX TMP -- compatibility layer for the original code

: clear-arena  ( -- )
  0 2 at-xy 608 spaces  ;
  \ Clear screen except the status bars.

: pause  ( n -- )
  0 do  200 0 do  loop  loop  ;

-->

( .score ) debug-point

: .score  ( n y x -- )
  at-yx dup dup dup 1000 < if  [char] 0 emit  then
                     100 < if  [char] 0 emit  then
                      10 < if  [char] 0 emit  then .  ;

: rnd  ( -- n )
  15403 c@ 31 and  ;
  \ Return a random number _n_ (0..31).

-->

( udg-set >udg >scan scan! ) debug-point

          27 constant udgs   \ number of UDGs
           8 constant scans  \ scans per UDG
udgs scans * constant /udgs  \ size of the UDG set

create udg-set /udgs allot

: .udgs  ( -- )  cr udgs 0 do  i 'a' + emit  loop
                 cr udgs 0 do  i 128 + emit  loop  ;
  \ Print all game UDGs.
  \ XXX TMP -- for debugging

udg-set os-udg !
  \ Point system UDG to the game UDG set.
  \ Solo Forth will use this set for chars 128..255.

: >udg  ( c -- a )  'a' - scans * udg-set +  ;
  \ Convert UDG char _c_ to the address _a_ of its bitmap.

' >udg >body cell+ constant >'a'
: debug-point  ( -- )  debug-point
  >'a' @ 97 <> abort" >udg has been corrupted"  ;
  \ XXX TMP -- for debugging

: >scan  ( n c -- a )  >udg +  ;
  \ Convert scan number _n_ of UDG char _c_ to its address _a_.

: scan!  ( c b n -- c )  rot >scan c!  ;
  \ Store scan _b_ into scan number _n_ of char _c_,
  \ and return _c_ back for further processing.

-->

( graphics-on graphics-off )

: graphics-on  ( -- )  udg-set 'a' scans * -  os-chars !  ;
  \ Set the UDG set as main font, pointing the first UDG
  \ to char 'a'. This way the original code will work without
  \ change.
  \ XXX TMP -- compatibility layer for the original code

: graphics-off ( -- )  15360 os-chars !  ;
  \ Set the ROM charset.
  \ XXX TMP -- compatibility layer for the original code

-->

( sprite! 2sprite! ) debug-point

: sprite!  ( n0..n7 c -- )
  scans 0 do
    dup scans 1+ i - roll i scan!
  loop  drop  ;
  \ Store a 1x1 UDG sprite into char _c_.

: 2sprite!  ( n0..n7 c -- )
  scans 0 do
    dup scans 1+ i - pick flip i scan! 1+  \ first UDG
    dup scans 1+ i - roll      i scan! 1-  \ second UDG
  loop  drop  ;
  \ Store a 2x1 UDG sprite into char _c_.
  \ Scans _n0..n7_ are 16-bit: high part is char _c_,
  \ and low part is the next char.

-->

( graphics ) debug-point

binary
  \ "ab",  30 points invader, sprite 2
0000000110000000
0000001111000000
0000011111100000
0000110110110000
0000111111110000
0000010110100000
0000100000010000
0000010000100000

char a 2sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "cd",  30 points invader, sprite 1
0000000110000000
0000001111000000
0000011111100000
0000110110110000
0000111111110000
0000001001000000
0000010110100000
0000101001010000

char c 2sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "ef",  20 points invader, position 2
0000100000100000
0010010001001000
0010111111101000
0011101110111000
0011111111111000
0001111111110000
0000100000100000
0001000000010000

char e 2sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "gh",  20 points invader, position 1
0000100000100000
0000010001000000
0000111111100000
0001101110110000
0011111111111000
0011111111111000
0010100000101000
0000011011000000

char g 2sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "ij",  10 points invader, position 2
0000001111000000
0001111111111000
0011111111111100
0011100110011100
0011111111111100
0000111001110000
0001100110011000
0000110000110000

char i 2sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "kl",  10 points invader, position 1
0000001111000000
0001111111111000
0011111111111100
0011100110011100
0011111111111100
0000011001100000
0000110110110000
0011000000001100

char k 2sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "mn", tank
0000000100000000
0000001110000000
0000001110000000
0111111111111100
1111111111111110
1111111111111110
1111111111111110
1111111111111110

char m 2sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "op", ufo
0000000000000000
0000011111100000
0001111111111000
0011111111111100
0110110110110110
1111111111111111
0011100110011100
0001000000001000

char o 2sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "qr", explosion, frame 2
0000010001000000
0010001010001000
0001000000010000
0000100000100000
0110000000001100
0000010000100000
0001001010010000
0010010001001000

char q 2sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "s", char 115, laser
00000000
00000001
00000001
00000001
00000001
00000001
00000000
00000000

char s sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "tu", explosion, frame 1
0000000000000010
0010000001100100
0100011111110000
0000111111111010
0001111011011001
0100110011110000
1000011111000100
0010001100010010

char t 2sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "v", brick
11111011
11111011
11111011
00000000
11011111
11011111
11011111
00000000

char v sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "w", horizontal rule
00000000
00000000
00000000
00000000
00000000
00000000
11111111
00000000

char w sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "xy", top of container
0000001111100000
0001110000011100
0010001111100010
0010000000000010
0010000111000010
0010001111100010
0010000111000010
0010000010000010

char x 2sprite!

decimal  -->

( graphics ) debug-point

binary
  \ "z{", bottom of container
0010010101010010
0010111101111010
0010111000111010
0010011000110010
0010000000000010
0001110000011100
0000001111100000
0000000000000000

char z 2sprite!

decimal  -->

( instructions ) debug-point

: wait  ( -- )  begin  inkey  until  ;

: instructions  ( -- )
  cls
   1 8 at-yx ." nuclear invaders"
   6 4 at-yx ." controls: left  = z"
  7 14 at-yx           ." right = x"
  8 14 at-yx           ." fire  = enter"
  14 6 at-yx ." *press key to start*"
  21 6 at-yx ." c scainet soft, 2013"
  wait 9 pause  ;

-->

( presentation ) debug-point

: presentation  ( -- )
  cls
  ."  score<1>   hi-score   score<2>"
  score @ 1 3 .score
  record @ 1 14 .score
  5 14 at-yx ." play"
  7 8 at-yx ." nuclear invaders"
  10 5 at-yx ." *score advance table*"
  12 9 at-yx ." op =? mystery"
  14 9 at-yx ." cd =30 points"
  16 9 at-yx ." gh =20 points"
  18 9 at-yx ." kl=10 points"
  22 4 at-yx ." mnmn" 13 spaces
  ." credit 00"
  wait clear-arena  -->

( presentation ) debug-point

  21 1 at-yx ." wwwwwwwwwwwwwwwwwwwwwwwwwwwwww"
  22 2 at-yx ." 3"
  11 9 at-yx ." play player<1>"
  10 0 do
    1 3 at-yx 4 spaces  3 pause
    1 3 at-yx ." 0000" 3 pause
  loop
  3 lifes ! 2 phase ! score off  ;

-->

( invaders-data ) debug-point

  \ Invaders data is stored in a table.
  \ which has the following structure:
  \
  \ +0 = lifes (0..3)
  \ +1 = active? (0..1)
  \ +2 = y coordinate (row)
  \ +3 = x coordinate (column)
  \ +4 = main graphic (character)

  \ The `invader` variable points to the data of the current
  \ invader in the table.

create default-invaders-data
  \ Default invaders data table.
  \ This is used to restore the actual data table
  \ before a new game.

here

  \ lifes    active?   y      x     character
    3 c,     0 c,      5 c,   0 c,  'c' c,
    3 c,     0 c,      7 c,   0 c,  'g' c,
    3 c,     0 c,      9 c,   0 c,  'g' c,
    3 c,     0 c,     11 c,   0 c,  'k' c,
    3 c,     0 c,      5 c,  29 c,  'c' c,
    3 c,     0 c,      7 c,  29 c,  'g' c,
    3 c,     0 c,      9 c,  29 c,  'g' c,
    3 c,     0 c,     11 c,  29 c,  'k' c,
    3 c,     0 c,     13 c,  29 c,  'k' c,

here swap - constant /invaders-data
  \ Space occupied by the invaders data.

create invaders-data  /invaders-data allot
  \ Current invaders data.

-->

( draw-containers ) debug-point

: .brick  ( -- )  ." v"  ;

: draw-containers  ( -- )
  15 15 phase @ - dup ufo-x ! at-yx phase @ 2* 2+
  dup 0 do  ." v"  loop
  4 ufo-x @ at-yx 0 do  ." v"  loop
  3 13 do
    ufo-x @ dup i at-xy ." v"
    phase @ 0 do ." xy" loop  \ top of containers
    ." v" i 1+ at-xy ." v"
    phase @ 0 do ." z{" loop  \ bottom of containers
    ." v"
  -2 +loop  ;

-->

( init ) debug-point

: init-invaders-data  ( -- )
  default-invaders-data invaders-data /invaders-data move  ;

: init-ufo  ( -- )  -200 ufo-x !  ;

: init-invaders  ( -- )
  init-invaders-data  invaders-data invader !  30 invaders !
  init-ufo  ;

: init-tank  ( -- )  3 tank-x !  shoot-y off  ;

-->

( init ) debug-point

: init  ( -- )
  clear-arena draw-containers
  99 103 dup 107 dup
  3 13 do
    1 i at-xy dup emit dup 1+ emit 29 i at-xy dup emit 1+ emit
  -2 +loop

  init-invaders init-tank  ;

-->

( move-tank ) debug-point

: move-tank  ( -- )
  tank-x @ dup
  27 < if
    inkey 'x' = if  1 tank-x +!  then
  then
  3 > if
    inkey 'z' = if  -1 tank-x +!  then
  then
  tank-x @ 1- 20 at-xy ."  mn " ;

-->

( move-invader ) debug-point

: move-invader  ( -- f )
  invader @ c@ 0> if
    invader @ 1+ c@ 0= if
      rnd invaders @ 5 < if 10 else 26 then
      > if 1 invader @ 1+ c! then 0

-->

( move-invader ) debug-point

    else
      invader @ 10025 < if  1  else  -1  then
      dup dup invader @ 3 + c@ + invader @ 3 + c!
      invader @ 2+ c@ invader @ 3 + c@ at-yx
      0> if  space  then
      invader @ 4 + c@ invader @ 3 + c@ 2 mod 0> if  2-  then
      dup emit 1+ emit 0< if space then
      invader @ 3 + c@ dup 14 phase @ -  =
      if  drop 1  else  15 phase @ + = if  1  else  0  then
      then
    then
  else  0  then
  invader @ 10045 = if    10000
                    else  invader @ 5 +
                    then  invader !  ;  -->

( ufo ) debug-point

: ufo  ( -- )
  ufo-x @ dup 0<
  if    1+ ufo-x !
  else  dup 27 > if     3 at-xy 3 spaces init-ufo
                 else   1+ dup ufo-x ! 3 at-xy ."  op"
                 then
  then  ;

-->

( impact ) debug-point

: impact  ( -- f )
  9216 shoot-y @ 32 * + shoot-x @ + c@ 32 =
  if  0
  else
    shoot-y @ 15 < if
      shoot-y @ 3 = if
        ufo-x @ 1+ 3 at-xy ." tu"
        18 12 do  i 15 beep  loop
        rnd 12 / 1+ 50 * dup ufo-x @ 1+ 3 at-xy
        . score @ + dup score !
        1 3 .score 20 pause ufo-x @ 3 at-xy 4 spaces
        200 ufo-x !
      else

-->

( impact ) debug-point

        invaders @ 1- invaders !
        shoot-y @ 3 - 2 / shoot-x @ 15 >  if  5 +  then
        shoot-y @ dup 5 = if   drop 30
                          else 10 > if  10  else  20  then
                          then
        score @ + dup score !
        1 3 .score 1- 5 * 10000 + shoot-y !
        shoot-y @ 2+ c@ shoot-y @ 3 + c@ dup 15 < if  1+  then
        2dup at-yx ." qr"
        10 100 beep at-yx 2 spaces

-->

( impact ) debug-point

        shoot-y @ dup c@ 1- swap c! shoot-y @ c@ 0> if
          0 shoot-y @ 1+ c! shoot-x @ 15 < if 0 else 29 then
          shoot-y @ 3 + c! shoot-y @ 2+ c@
          shoot-y @ 3 + c@ at-yx
          shoot-x @ 15 < if  space  then
          shoot-y @ 4 + c@ dup emit 1+ emit
        then
      then
    then  shoot-y off  1
  then  ;

-->

( shoot ) debug-point

: shoot
  shoot-y @ 0=
  if    inkey 13 = if  tank-x @ shoot-x ! 19 shoot-y !  then
  else  shoot-y @ dup shoot-x @ at-yx space 5 <
        if    shoot-y off
        else  shoot-y @ 2- shoot-y ! impact 0=
              if  shoot-y @ shoot-x @ at-yx 115 emit  then
        then
  then ;

-->

( new-record? new-record check-record ) debug-point

: new-record?   ( -- f )  score @ record @ >  ;
: new-record    ( -- f )  score @ record !  ;
: check-record  ( -- )  new-record? if  new-record  then  ;

-->

( alive game-over next-phase ) debug-point

: .lifes  ( n -- )
  22 tuck at-xy . dup 2* 2+ 22 at-xy 2 spaces  ;

: .game-over  ( -- )  11 17 at-xy ." GAME  OVER"  ;

: game-over  ( -- )  .game-over  check-record  ;

: tune  ( -- )  100 200 do  i 20 beep  -5 +loop  ;

: the-end?  ( -- f )
  tune  30 pause
  lifes @ 1- dup 0>
  if  .lifes  else  game-over  then  dup lifes ! 0= ;

: next-phase  ( -- )
  invaders @ 0= if
    phase @ dup 5 < if  1+  then  phase ! 100 pause init
  then ;

-->

( run ) debug-point

: round  ( -- )
  begin   2 pause
          move-tank shoot ufo next-phase move-invader
  until  ;

: run  ( -- )
  instructions
  begin  presentation
    begin  init round the-end?  until  200 pause
  again  ;

  \ ==========================================================
  \ History

  \ This is mainly a compilation of the git commit comments.

  \ 2016-02-14: Started changing the layout of the original
  \ source code.
  \
  \ 2016-02-15:
  \
  \ Change the layout of the source code.
  \ - Convert the source to lowercase.
  \ - Rename Spanish words to English.
  \ - Rename variables using meaningful names.
  \ - Indent the word definitions and the control structures.
  \ - Split lines at 63 columns.
  \ - Add block titles.
  \
  \ Adapt graphics and data; start factoring.
  \ - Convert the graphics to binary numbers.
  \ - Implement words to define the graphics.
  \ - Adapt the invaders data.
  \ - Factorize some words.
  \ - Adapt old `pick`.
  \ - Optimize some code idioms.

\ vim: filetype=soloforth
