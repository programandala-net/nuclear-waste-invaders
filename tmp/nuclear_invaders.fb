( nuclear-invaders )                                            \ Version 0.0.0+201605131201                                    \ Description                                                   \ This game is a ZX Spectrum port (for Solo Forth:              \ http://programandala.net/en.program.solo_forth.html) of a     \ game written by Dancresp in 2013 for Jupiter ACE              \ (http://www.zonadepruebas.com/viewtopic.php?t=4231).          \ Copyright (C) 2016 Marcos Cruz (programandala.net)            \ Copyright (C) 2013 Scainet Soft                               \ License                                                       \ You may do whatever you want with this work, so long as you   \ retain the copyright/authorship/acknowledgment/credit         \ notice(s) and this license in all redistributed copies and    \ derived works.  There is no warranty.                         only forth definitions                                          blk @ 1- last-locatable !                                       need roll      need inkey   need bleep        need beep>bleep   need os-chars  need os-udg  need 2/           need abort"       need value     need case    need random       need columns      need rows      need ocr     need ms           need s+           need 2value    need row     need char>string  need s\"          need alias     need plot    need adraw        need inverse      need overprint need column                                      4 constant /kk                                                  need kk-ports  need kk-1#   need pressed?     need kk-chars     [defined] binary  ?\ : binary  ( -- )  2 base !  ;              need defer                                                      need :noname  need benched    need ~~   13 ~~key !              defer (debug-point)  ' noop ' (debug-point) defer!              : debug-point  ( -- )                                             (debug-point)                                                   depth if                                                          cr ." Latest word: " latest .name                               cr .s  #-258 throw \ stack imbalance                          then                                                            ;                                                             debug-point                                                     16384 constant sys-screen  6912 constant /sys-screen                                       6144 constant /sys-screen-bitmap     22528 constant attributes  768 constant /attributes                  2 constant arena-top-y                                         21 constant tank-y                                          tank-y constant arena-bottom-y                                      23 constant status-bar-y                                    debug-point                                                     0 constant black    1 constant blue   2 constant red            3 constant magenta  4 constant green  5 constant cyan           6 constant yellow   7 constant white                            : papery   ( color -- paper-attribute )           8 *  ;        : brighty  ( attribute -- brighty-attribute )   64 or  ;        : flashy   ( attribute -- flashy-attribute )   128 or  ;        debug-point                                                     : set-color  ( b -- )  23695 c!  ;                              : color  ( b "name" -- )                                          create c,  does> ( -- )  ( pfa ) c@ set-color  ;              debug-point                                                                   white color text-color                                          black color arena-color                            white papery red + color brick-color                                  blue brighty color tank-color                                           blue color life-color                                          green color invader-color                              yellow brighty color container-color                                    yellow color projectile-color                                  magenta color ufo-color                             : init-colors  ( -- )                                             0 paper 7 ink 0 flash 0 bright                                  0 overprint 0 inverse 1 border  ;                             debug-point                                                     variable tank-x        \ column                                 variable projectile-x  \ column                                 variable projectile-y  \ row, 0 if no shoot                     variable ufo-x         \ column                                 variable lifes         \ counter (0..3)                         variable level         \ counter (1..5)                         variable score         \ counter                                variable record        \ max score                              variable invaders      \ counter (all units of every type)      variable invader-type  \ element of table  (0..9)               variable catastrophe   \ flag (game end condition)              record off                                                      debug-point                                                     13 constant enter-key                                           0 value kk-left#    0 value kk-right#    0 value kk-fire#       0. 2value kk-left   0. 2value kk-right   0. 2value kk-fire      : wait  ( -- )  begin  inkey  until  ;                          : enter-key?  ( -- f )  inkey enter-key =  ;                    : wait-for-enter  ( -- )  begin  enter-key?  until  ;           : kk#>c  ( n -- c )  kk-chars + c@  ;                           : kk#>string  ( n -- ca len )                                     case  kk-en# of  s" Enter"         endof                              kk-sp# of  s" Space"         endof                              dup kk#>c upper char>string rot  \ default                endcase  ;                                                    3 constant /controls                                            create controls  here                                               kk-5# c,  kk-8# c,  kk-en# c,   \ cursor with Enter             kk-r# c,  kk-t# c,  kk-en# c,   \ Spanish Dvorak keyboard       kk-z# c,  kk-x# c,  kk-en# c,   \ from the original game        kk-5# c,  kk-8# c,  kk-0#  c,   \ cursor joystick               kk-5# c,  kk-8# c,  kk-sp# c,   \ cursor with Space             kk-1# c,  kk-2# c,  kk-5#  c,   \ Sinclair joystick 1           kk-6# c,  kk-7# c,  kk-0#  c,   \ Sinclair joystick 2           kk-o# c,  kk-p# c,  kk-q#  c,   \ QWERTY                        kk-n# c,  kk-m# c,  kk-q#  c,   \ QWERTY                        kk-q# c,  kk-w# c,  kk-p#  c,   \ QWERTY                        kk-z# c,  kk-x# c,  kk-p#  c,   \ QWERTY                    here swap - /controls / constant max-controls                   max-controls 1- constant last-control                           : >controls  ( n -- a )  /controls * controls +  ;              : #>kk  ( n -- d )  /kk * kk-ports + kk@  ;                     : set-controls  ( n -- )                                          >controls     dup c@  dup to kk-left#   #>kk 2to kk-left                   1+ dup c@  dup to kk-right#  #>kk 2to kk-right                  1+     c@  dup to kk-fire#   #>kk 2to kk-fire  ;   variable current-controls                                       current-controls off                                            current-controls @ set-controls                                 : next-controls  ( -- )                                           current-controls @ 1+  dup last-control > 0= abs *              dup current-controls !  set-controls  ;                       debug-point                                                     : beep  ( n1 n2 -- )  beep>bleep bleep  ;                       debug-point                                                             $80 constant first-udg  \ first UDG code in Solo Forth          $FF constant last-udg   \ last UDG code in Solo Forth           128 constant udgs       \ number of UDGs \ XXX TMP --             8 constant /udg       \ bytes per UDG                 udgs /udg * constant /udg-set   \ size of the UDG set in bytes  create udg-set /udg-set allot                                   udg-set os-udg !                                                : udg>bitmap  ( c -- a )  first-udg - /udg * udg-set +  ;       : >scan  ( n c -- a )  udg>bitmap +  ;                          : scan!  ( c b n -- c )  rot >scan c!  ;                        variable used-udgs  used-udgs off                               : ?free-udg  ( n -- )                                             used-udgs +!  used-udgs @ udgs > abort" Too many UDGs"  ;     debug-point                                                     : font!  ( a -- )  os-chars !  ;                                : font@  ( -- a )  os-chars @  ;                                variable ocr-first-udg                                          variable ocr-last-udg                                           : init-ocr  ( -- )                                                ocr-first-udg @ udg>bitmap ocr-charset !                        ocr-first-udg @ ocr-first !                                     ocr-last-udg @ ocr-first-udg @ - 1+ ocr-chars !  ;  \ chars   : rom-font  ( -- )  15360 font!  ;                              warnings @  warnings off                                        variable ~~base                                                 : ~~(  ( -- )  base @ ~~base ! decimal  ;                       : ~~)  ( -- )  ~~base @ base !  ;                               : ~~  ( -- )                                                      postpone ~~(  postpone ~~  postpone ~~)  ; immediate          ~~? off                                                         warnings !                                                      : XXX  ( -- )                                                     ~~? on                                                          base @ >r decimal latest .name .s r> base !                     key drop ;                                                    debug-point                                                      1 constant score-y                                             14 constant record-x                                            variable players  1 players !  \ XXX TODO -- not used yet       variable player   1 player !   \ XXX TODO -- not used yet       : score-x  ( -- x )  3 player @ 1- 22 * +  ;                    : (.score)  ( n x y -- )                                          at-xy s>d <# # # # # #> text-color type  ;                    : score-xy  ( -- x y )  score-x score-y  ;                      : at-score  ( -- )  score-xy at-xy  ;                           : .score  ( -- )  score @ score-xy (.score)  ;                  : .record  ( -- )  record @ record-x score-y (.score)  ;        : update-score  ( n -- )  score +! .score  ;                        variable >udg  first-udg >udg !  \ next free UDG            variable latest-sprite-width                                    variable latest-sprite-height                                   variable latest-sprite-udg                                      : ?udg  ( c -- )  last-udg > abort" Too many UDGs"  ;           : free-udg  ( n -- c )                                            >udg @ dup latest-sprite-udg !                                  tuck +  dup >udg !  1- ?udg  ;                                : latest-sprite-size!  ( width height -- )                        latest-sprite-height !  latest-sprite-width !  ;              : ?sprite-height  ( -- )                                          latest-sprite-height @ 1 >                                      abort" Sprite height not supported for sprite strings"  ;     : sprite-string  ( "name" -- )                                    ?sprite-height                                                  here latest-sprite-udg @  latest-sprite-width @ dup >r          0 ?do  dup c, 1+  loop  drop  r> 2constant  ;                 : (1x1sprite!)  ( b0..b7 c -- )                                   1 ?free-udg  1 1 latest-sprite-size!                            /udg 0 do                                                         dup /udg 1+ i - roll i scan!                                  loop  drop  ;                                                 : 1x1sprite!  ( b0..b7 -- )                                       1 free-udg (1x1sprite!)  ;                                    : 1x1sprite  ( n0..n7 "name" -- )                                 1 free-udg dup constant (1x1sprite!)  ;                        ' emit alias .1x1sprite   ( c -- )                             ' emits alias .1x1sprites  ( c n -- )                           : (2x1sprite!)  ( n0..n7 c -- )                                   2 ?free-udg  2 1 latest-sprite-size!                            /udg 0 do                                                         dup /udg 1+ i - pick flip i scan! 1+  \ first UDG               dup /udg 1+ i - roll      i scan! 1-  \ second UDG            loop  drop  ;                                                 : 2x1sprite!  ( n0..n7 -- )                                       2 free-udg (2x1sprite!)  ;                                    : 2x1sprite  ( n0..n7 "name" -- )                                 2 free-udg dup constant (2x1sprite!)  ;                       : .2x1sprite  ( c -- )  dup emit 1+ emit  ;                     debug-point                                                     2 constant udg/invader                                          >udg @ ocr-first-udg !                                          binary                                                          0000001111000000                                                0001111111111000                                                0011111111111100                                                0011100110011100                                                0011111111111100                                                0000011001100000                                                0000110110110000                                                0011000000001100                                                2x1sprite invader-1                                             sprite-string invader-1$  ( -- ca len )                         0000001111000000                                                0001111111111000                                                0011111111111100                                                0011100110011100                                                0011111111111100                                                0000111001110000                                                0001100110011000                                                0001100000011000                                                2x1sprite!                                                      0000001111000000                                                0001111111111000                                                0011111111111100                                                0011100110011100                                                0011111111111100                                                0000111001110000                                                0001100110011000                                                0000110000110000                                                2x1sprite!                                                      0000001111000000                                                0001111111111000                                                0011111111111100                                                0011100110011100                                                0011111111111100                                                0000111001110000                                                0001100110011000                                                0001100000011000                                                2x1sprite!                                                      0000100000100000                                                0000010001000000                                                0000111111100000                                                0001101110110000                                                0011111111111000                                                0011111111111000                                                0010100000101000                                                0000011011000000                                                2x1sprite invader-2                                             sprite-string invader-2$  ( -- ca len )                         binary                                                          0000100000100000                                                0000010001000000                                                0000111111100000                                                1111101110111110                                                0011111111111000                                                0001111111110000                                                0000100000100000                                                0001000000010000                                                2x1sprite!                                                      0000100000100000                                                0010010001001000                                                0010111111101000                                                0011101110111000                                                0011111111111000                                                0001111111110000                                                0000100000100000                                                0001000000010000                                                2x1sprite!                                                      0000100000100000                                                0000010001000000                                                0000111111100000                                                1111101110111110                                                0011111111111000                                                0001111111110000                                                0000100000100000                                                0001000000010000                                                2x1sprite!                                                      0000000110000000                                                0000001111000000                                                0000011111100000                                                0000110110110000                                                0000111111110000                                                0000001001000000                                                0000010110100000                                                0000101001010000                                                2x1sprite invader-3                                             sprite-string invader-3$  ( -- ca len )                         0000000110000000                                                0000001111000000                                                0000011111100000                                                0000110110110000                                                0000111111110000                                                0000010110100000                                                0000100000010000                                                0000100000010000                                                2x1sprite!                                                      0000000110000000                                                0000001111000000                                                0000011111100000                                                0000110110110000                                                0000111111110000                                                0000010110100000                                                0000100000010000                                                0000010000100000                                                2x1sprite!                                                      0000000110000000                                                0000001111000000                                                0000011111100000                                                0000110110110000                                                0000111111110000                                                0000010110100000                                                0000100000010000                                                0000100000010000                                                2x1sprite!                                                      0000000000000000                                                0000011111100000                                                0001111111111000                                                0011111111111100                                                0110110110110110                                                1111111111111111                                                0011100110011100                                                0001000000001000                                                2x1sprite ufo                                                   sprite-string ufo$  ( -- ca len )                               0000000000000000                                                0000011111100000                                                0001111111111000                                                0011111111111100                                                0011011011011010                                                1111111111111111                                                0011100110011100                                                0001000000001000                                                2x1sprite!                                                      0000000000000000                                                0000011111100000                                                0001111111111000                                                0011111111111100                                                0101101101101100                                                1111111111111111                                                0011100110011100                                                0001000000001000                                                2x1sprite!                                                      0000000000000000                                                0000011111100000                                                0001111111111000                                                0011111111111100                                                0010110110110110                                                1111111111111111                                                0011100110011100                                                0001000000001000                                                2x1sprite!                                                      11111011                                                        11111011                                                        11111011                                                        00000000                                                        11011111                                                        11011111                                                        11011111                                                        00000000                                                        1x1sprite brick                                                 >udg @ 1- ocr-last-udg !                                        11111111                                                        11111111                                                        11111000                                                        11111100                                                        11100100                                                        10000000                                                        00000000                                                        00000000                                                        1x1sprite broken-top-brick                                      00000000                                                        10000000                                                        10100000                                                        11100100                                                        11111100                                                        11111000                                                        11111101                                                        11111111                                                        1x1sprite broken-bottom-brick                                   2 constant udg/tank                                             0000000100000000                                                0000001110000000                                                0000001110000000                                                0111111111111100                                                1111111111111110                                                1111111111111110                                                1111111111111110                                                1111111111111110                                                2x1sprite!                                                      sprite-string tank$  ( -- ca len )                              0000010001000000                                                0010001010001000                                                0001000000010000                                                0000100000100000                                                0110000000001100                                                0000010000100000                                                0001001010010000                                                0010010001001000                                                2x1sprite!                                                      sprite-string invader-explosion$  ( -- ca len )                 00000000                                                        00000001                                                        00000001                                                        00000001                                                        00000001                                                        00000001                                                        00000000                                                        00000000                                                        1x1sprite projectile                                            0000000000000010                                                0010000001100100                                                0100011111110000                                                0000111111111010                                                0001111011011001                                                0100110011110000                                                1000011111000100                                                0010001100010010                                                2x1sprite!                                                      sprite-string ufo-explosion$  ( -- ca len )                     0000001111100000                                                0001110000011100                                                0010001111100010                                                0010000000000010                                                0010000111000010                                                0010001111100010                                                0010000111000010                                                0010000010000010                                                2x1sprite container-top                                         00000000                                                        00011100                                                        00100010                                                        00100010                                                        00100010                                                        00100001                                                        00100001                                                        00100001                                                        1x1sprite broken-top-left-container                             00000000                                                        00011100                                                        00100010                                                        00100010                                                        01000010                                                        01000010                                                        01000010                                                        10000010                                                        1x1sprite broken-top-right-container                            0010010101010010                                                0010111101111010                                                0010111000111010                                                0010011000110010                                                0010000000000010                                                0001110000011100                                                0000001111100000                                                0000000000000000                                                2x1sprite container-bottom                                      00000001                                                        00000111                                                        00011110                                                        00100110                                                        00100000                                                        00011100                                                        00000011                                                        00000000                                                        1x1sprite broken-bottom-left-container                          11000000                                                        01110000                                                        00111100                                                        00110010                                                        00000010                                                        00011100                                                        11100000                                                        00000000                                                        1x1sprite broken-bottom-right-container                         0000000000000000                                                0000000000001000                                                0000000000001100                                                0000111111111110                                                0000111111111111                                                0000111111111110                                                0000000000001100                                                0000000000001000                                                2x1sprite right-arrow                                           sprite-string right-arrow$  ( -- ca len )                       0000000000000000                                                0001000000000000                                                0011000000000000                                                0111111111110000                                                1111111111110000                                                0111111111110000                                                0011000000000000                                                0001000000000000                                                2x1sprite left-arrow                                            sprite-string left-arrow$  ( -- ca len )                        0000111111110000                                                0011000000001100                                                0011000000001100                                                0010111111110100                                                0010000000000100                                                0010000000000100                                                0010000000000100                                                1111111111111111                                                2x1sprite fire-button                                           sprite-string fire-button$  ( -- ca len )                       debug-point                                                     : centered  ( len -- column )  columns swap - 2/  ;             : centered-at  ( row len -- )  centered swap at-xy  ;           : center-type  ( ca len row -- )  over centered-at type  ;      : type-blank  ( ca len -- )  nip spaces  ;                      : center-type-blank  ( ca len row -- )                            over centered-at type-blank ;                                 17 constant message-y  \ row for game messages                  : message  ( ca len -- )                                          2dup message-y text-color center-type  1500 ms                       message-y center-type-blank  ;                           debug-point                                                     : title  ( -- )  s" NUCLEAR INVADERS" 0 center-type  ;          : (c)  ( -- )  127 emit  ;                                      : .copyright  ( -- )                                              row                                                             1 over    at-xy (c) ."  2013 Scainet Soft"                      1 over 1+ at-xy (c) ."  2016 Marcos Cruz"                       8 swap 2+ at-xy           ." (programandala.net)"  ;          : left-key$   ( -- ca len )  kk-left# kk#>string  ;             : right-key$  ( -- ca len )  kk-right# kk#>string  ;            : fire-key$   ( -- ca len )  kk-fire# kk#>string  ;             : controls$  ( -- ca len )                                        left-arrow$ left-key$ s+                                        s"   " s+ fire-key$ s+ s"   " s+                                right-key$ s+ right-arrow$ s+  ;                              : .controls  ( -- )                                               s" [Space] to change controls:" row dup >r center-type          fire-button$ r@ 2+ center-type                                  0 r@ 3 + at-xy columns spaces                                   controls$ r> 3 + center-type  ;                               : .score-table-item  ( ca1 len1 ca2 len2 -- )                     type text-color ."  = " type  ;                               9 constant score-table-x                                        : .score-table  ( -- )                                            score-table-x row                                               2dup     at-xy s" 10 points"                                             invader-color invader-1$ .score-table-item             2dup 2+  at-xy s" 20 points"                                             invader-color invader-2$ .score-table-item             2dup 4 + at-xy s" 30 points"                                             invader-color invader-3$ .score-table-item                  6 + at-xy s" bonus"                                                 ufo-color ufo$ .score-table-item  ;                  : at-controls  ( -- )  0 12 at-xy  ;                            : show-controls  ( -- )  at-controls .controls  ;               : menu  ( -- )                                                    begin                                                             break-key? if  quit  then  \ XXX TMP                            key                                                             dup enter-key = if  drop exit  then                                        bl = if  next-controls show-controls  then         again  ;                                                      : instructions  ( -- )                                            text-color  cls  title                                          0 3 at-xy .score-table                                          show-controls                                                   s" [Enter] to start" 18 center-type                             0 21 at-xy .copyright                                           menu  ;                                                       arena-bottom-y arena-top-y - 1+ columns * constant /arena       arena-top-y columns * attributes + constant arena-top-attribute : black-arena  ( -- )  arena-top-attribute /arena erase  ;      : wipe-arena  ( -- )  0 arena-top-y at-xy /arena spaces  ;      : -arena  ( -- )  black-arena wipe-arena  ;                     : score-bar$  ( -- ca len )                                       text-color s"  SCORE<1>    RECORD    SCORE<2>"  ;             : score-bar  ( -- )                                               home score-bar$ type .score .record  ;                        : show-player  ( -- )                                             10 0 do  at-score 4 spaces 64 ms  .score 64 ms  loop  ;       need pixel-addr                                                 : row>pixel  ( n1 -- n2 )  8 * 191 swap -  ;                    : ruler  ( -- )                                                   [ 0 tank-y row>pixel 8 - pixel-addr nip ] literal               columns $FF fill  ;                                           : at-lifes  ( -- )  0 status-bar-y at-xy  ;                     : .lifes  ( -- )                                                  at-lifes life-color                                             lifes @ 0 ?do  tank$ type  loop  ."   "  ;                    : status-bar  ( -- )  ruler .lifes  ;                           : game-screen  ( -- )  init-colors cls score-bar status-bar  ;                      0 constant invaders-min-x                   columns udg/invader - constant invaders-max-x                        10 constant invader-types                                  6 cells constant /invader-type                                  create default-invaders-data                                    here                                                                3 ,     0 ,      5 , invaders-min-x ,  invader-3 ,   1 ,        3 ,     0 ,      7 , invaders-min-x ,  invader-2 ,   1 ,        3 ,     0 ,      9 , invaders-min-x ,  invader-2 ,   1 ,        3 ,     0 ,     11 , invaders-min-x ,  invader-1 ,   1 ,        3 ,     0 ,     13 , invaders-min-x ,  invader-1 ,   1 ,        3 ,     0 ,      5 , invaders-max-x ,  invader-3 ,  -1 ,        3 ,     0 ,      7 , invaders-max-x ,  invader-2 ,  -1 ,        3 ,     0 ,      9 , invaders-max-x ,  invader-2 ,  -1 ,        3 ,     0 ,     11 , invaders-max-x ,  invader-1 ,  -1 ,        3 ,     0 ,     13 , invaders-max-x ,  invader-1 ,  -1 ,    here swap - constant /invaders-data                             create invaders-data  /invaders-data allot                      : >invader   ( -- n )  invader-type @ /invader-type *  ;        : 'invader   ( -- a )  >invader invaders-data +  ;              : 'default-invader   ( -- a )                                     >invader default-invaders-data +  ;                           : invader-units   ( -- a )  'invader            ;               : invader-active  ( -- a )  'invader cell+      ;               : invader-y       ( -- a )  'invader [ 2 cells ] literal +  ;   : invader-x       ( -- a )  'invader [ 3 cells ] literal +  ;   : invader-xy@    ( -- x y )  invader-y 2@  ;                    : invader-char@  ( -- c )  'invader [ 4 cells ] literal + @  ;  : invader-x-inc@  ( -- n )  'invader [ 5 cells ] literal + @  ; : invader-default-x@    ( -- x y )                                'default-invader [ 3 cells ] literal + @  ;                    4 constant building-top-y                                      15 constant building-bottom-y                                   variable building-width                                         variable building-left-x     variable building-right-x          variable containers-left-x   variable containers-right-x        : set-building-size  ( -- )                                       level @ 2* 2+  building-width !                                 [ columns 2/ 1- ] literal \ half of the screen                  level @ \ half width of all containers                          2dup 1- - containers-left-x !                                   2dup    - building-left-x !                                     2dup    + containers-right-x !                                       1+ + building-right-x !  ;                               5 constant max-level                                            : increase-level  ( -- )  level @ 1+ max-level min level !  ;   : update-level  ( -- )  increase-level set-building-size  ;     : init-level  ( -- )  level off  update-level  ;                : floor  ( y -- )                                                 building-left-x @ swap at-xy                                    brick-color brick building-width @ .1x1sprites  ;             : building-top  ( -- )  building-top-y floor  ;                 : building-bottom  ( -- )  building-bottom-y  floor  ;          : containers-bottom  ( n -- )                                     container-color                                                 0 ?do  container-bottom .2x1sprite  loop  ;                   : containers-top  ( n -- )                                        container-color                                                 0 ?do  container-top .2x1sprite  loop  ;                      : .brick  ( -- )  brick-color brick .1x1sprite  ;               : building  ( -- )                                                building-bottom                                                 level @  building-left-x @                                      building-top-y [ building-bottom-y 2- ] literal                 do                                                                2dup i 1+ at-xy .brick containers-bottom .brick                 2dup i    at-xy .brick containers-top    .brick               -2 +loop  2drop  building-top  ;                                                  1 constant tank-min-x                       columns udg/tank - 1- constant tank-max-x                       : tank-range  ( column -- column' )                               tank-max-x min tank-min-x max  ;                              : ?space   ( -- )  column if  text-color space  then  ;         : moving-tank?  ( -- -1|0|1 )                                     kk-left pressed? kk-right pressed? abs +  ;                   : .tank  ( -- )  tank-color tank$ type  ;                       : at-tank  ( -- )  tank-x @ tank-y at-xy  ;                     : tank-ready  ( -- )  at-tank .tank  ;                          : -tank  ( -- )  at-tank text-color 2 spaces  ;                 : move-tank  ( -1|1 -- )                                          tank-x @ + tank-range dup tank-x ! tank-y at-xy  ;            : drive  ( -- )                                                   moving-tank? ?dup 0= ?exit  -tank move-tank .tank  ;          : init-game  ( -- )                                               init-ocr  3 lifes !  init-level  score off  game-screen  ;    : init-invaders-data  ( -- )                                      default-invaders-data invaders-data /invaders-data move  ;    : init-ufo  ( -- )  -200 ufo-x !  ;                             : total-invaders  ( -- n )                                        0   invader-types 0 do                                                i invader-type ! invader-units @ +                            loop  ;                                                   : init-invaders  ( -- )                                           init-invaders-data  invader-type off                            total-invaders invaders !  ;                                  : init-tank  ( -- )                                               columns udg/tank - 2/ tank-x !  \ middle of the screen          projectile-y off  ;                                           : parade  ( -- )                                                  invader-color                                                   invader-1 dup invader-2 dup invader-3                           building-bottom-y [ building-top-y 1+ ] literal                 do                                                                invaders-min-x i at-xy dup .2x1sprite                           invaders-max-x i at-xy     .2x1sprite                         2 +loop  ;                                                    : init-arena  ( -- )   -arena building tank-ready parade  ;     : level-message  ( -- ca len )                                    text-color s" LEVEL " level @ s>d <# # #> s+  ;               : show-level  ( -- )  level-message message  ;                  : init-combat  ( -- )                                             catastrophe off init-invaders init-ufo init-tank init-arena     show-level show-player  ;                                     : at-invader  ( -- )  invader-xy@ at-xy  ;                      4 constant frames/invader                                       : sprite>frame  ( c1 x -- c2 )                                    frames/invader mod udg/invader * +  ;                         : invader-frame  ( -- c )                                         invader-char@ invader-x @ sprite>frame  ;                     : .invader  ( -- )  invader-color invader-frame .2x1sprite  ;   variable broken-wall-x                                          : flying-to-the-right?  ( -- f )  invader-x-inc@ 0>  ;          red papery c,  here  red c,  constant broken-brick-colors       : broken-wall-color  ( -- )                                       broken-brick-colors flying-to-the-right? + c@ set-color  ;    : broken-bricks-coordinates  ( -- x1 y1 x2 y2 )                   broken-wall-x @ invader-y @ 1+  2dup 2-  ;                    : broken-left-wall  ( -- )                                        broken-bricks-coordinates                                       at-xy broken-bottom-brick .1x1sprite                            at-xy broken-top-brick  .1x1sprite  ;                         : broken-right-wall  ( -- )                                       broken-bricks-coordinates                                       at-xy broken-top-brick .1x1sprite                               at-xy broken-bottom-brick .1x1sprite  ;                       : broken-wall  ( -- )                                             broken-wall-color flying-to-the-right?                          if  broken-left-wall  else  broken-right-wall  then  ;        : broken-wall?  ( -- f )                                          invader-x @ flying-to-the-right?                                if    1+ building-left-x                                        else  building-right-x                                          then  @ dup broken-wall-x ! =  ;                              : broken-left-container  ( -- )                                   invader-x @ 2+ invader-y @ at-xy                                broken-top-right-container .1x1sprite                           invader-x @ 1+ invader-y @ 1+ at-xy                             broken-bottom-left-container .1x1sprite  ;                    : broken-right-container  ( -- )                                  invader-x @ 1- invader-y @ at-xy                                broken-top-left-container .1x1sprite                            invader-x @ invader-y @ 1+ at-xy                                broken-bottom-right-container .1x1sprite  ;                   : broken-container  ( -- )                                        container-color                                                 flying-to-the-right?  if    broken-left-container                                     else  broken-right-container  then  ;   : broken-container?  ( -- f )                                     invader-x @ flying-to-the-right?                                if    1+ containers-left-x                                      else     containers-right-x  then  @ =  ;                     : damages  ( -- )                                                 broken-wall? if  broken-wall exit  then                         broken-container? dup if    broken-container                                          then  catastrophe !  ;                  : flying-invader  ( -- )                                          invader-x-inc@ dup 0>  \ flying to the right?                   if    at-invader text-color space .invader invader-x +!         else  invader-x +! at-invader .invader ?space  then  ;        : activate-invader  ( -- )                                        32 random  26 invaders @ 5 < 16 * -  > invader-active !  ;    : last-invader-type?  ( -- f )                                    invader-type @ [ invader-types 1- ] literal =  ;              : next-invader  ( -- )                                            last-invader-type?                                              if  invader-type off  else  1 invader-type +!  then  ;        variable delay  50 delay !  \ ms                                : move-invader  ( -- )                                            delay @ ms  \ XXX TMP --                                        invader-active @                                                if  flying-invader damages  else  activate-invader  then  ;   : invasion  ( -- )                                                invader-units @ if  move-invader  then  next-invader  ;        3 constant ufo-y       \ row                                   27 constant ufo-max-x   \ column                                : ufo-invisible?  ( -- f )  ufo-x @ 0<  ;                       : at-ufo  ( -- )  ufo-x @ ufo-y at-xy  ;                        : -ufo  ( -- )  at-ufo 3 spaces init-ufo  ;                     : ufo-lost?  ( -- f )  ufo-x @ ufo-max-x >  ;                   : ufo-frame  ( -- c )  ufo ufo-x @ sprite>frame  ;              : flying-ufo  ( -- )                                              1 ufo-x +! at-ufo ufo-color space ufo-frame .2x1sprite  ;     : (move-ufo)  ( -- )                                              ufo-lost?  if  -ufo  else  flying-ufo  then  ;                : move-ufo  ( -- )                                                ufo-invisible? if  1 ufo-x +!  else  (move-ufo)  then  ;      : ufo-bang  ( -- )  18 12 do  i 15 beep  loop  ;                : ufo-on-fire  ( -- )                                             ufo-x @ 1+ ufo-y at-xy ufo-explosion$ type  ;                 : ufo-explosion  ( -- )  ufo-on-fire ufo-bang  ;                : ufo-points  ( -- n )  32 random 12 / 1+ 50 *  ;               : ufo-bonus  ( -- )                                               ufo-points dup ufo-x @ 1+ ufo-y at-xy .  update-score  ;      : ufo-impacted  ( -- )  ufo-explosion ufo-bonus 200 ms -ufo  ;  : invader-points  ( -- n )                                        projectile-y @ 3 - 2/          \ depending on the row           projectile-y @                                                  dup 5 = if  drop 30                                                     else  10 > 10 * 20 +  then  ;                         : invader-bonus  ( -- )  invader-points  update-score  ;        : invader-bang  ( -- ca len )  10 100 beep  ;                   : invader-on-fire  ( -- )                                         at-invader invader-explosion$ type  ;                         : -invader  ( -- )  at-invader 2 spaces  ;                      : invader-explosion  ( -- )                                       invader-on-fire invader-bang -invader  ;                      : impacted-invader  ( -- n )                                      projectile-y @ [ building-top-y 1+ ] literal - 2/               projectile-x @ [ columns 2/ ] literal > abs 5 * +  ;          : replace-invader  ( -- )                                         invader-active off                                              invader-default-x@ invader-x !  at-invader                      invader-color invader-char@ .2x1sprite  ;                     : current-invader-impacted  ( -- )                                invader-bonus invader-explosion                                 -1 invaders +!  -1 invader-units +!                             invader-units @ if  replace-invader  then  ;                  : invader-impacted  ( -- )                                        invader-type @ >r  impacted-invader invader-type !              current-invader-impacted  r> invader-type !  ;                : (impact)  ( -- )                                                projectile-y @ ufo-y = if  ufo-impacted exit  then              invader-impacted  ;                                           : impact  ( -- )                                                  projectile-y @ building-bottom-y <                              if  (impact)  then  projectile-y off  ;                       : projectile-xy  ( -- x y )  projectile-x @ projectile-y @  ;   : hit?  ( -- f )  projectile-xy ocr 0<>  ;                      : impact?  ( -- f )  hit? dup if  impact  then  ;               : at-projectile  ( -- )  projectile-xy at-xy  ;                 : .projectile  ( -- )                                             projectile-color at-projectile projectile .1x1sprite  ;       : fire-sound  ( -- )  ;                                         : fire  ( -- )                                                    tank-x @ projectile-x !                                         [ tank-y 1- ] literal projectile-y !  fire-sound  ;           : -projectile  ( -- )  at-projectile text-color space  ;        : projectile-lost?  ( -- f )                                      projectile-y @ building-top-y <  ;                            : shooted  ( -- )                                                 -projectile  projectile-lost? if  projectile-y off exit  then   -1 projectile-y +! impact? ?exit                                .projectile  ;                                                : shooted?  ( -- f )  projectile-y @ 0<>  ;                     : fire?  ( -- f )  kk-fire pressed?  ;                          : shoot  ( -- )                                                   shooted? if  shooted exit  then  fire? if  fire  then  ;      : new-record?   ( -- f )  score @ record @ >  ;                 : new-record    ( -- f )  score @ record !  ;                   : check-record  ( -- )  new-record? if  new-record  then  ;     : .game-over  ( -- )  s" GAME OVER" message  ;                  : game-over  ( -- )  .game-over check-record  ;                 : next-level  ( -- )  update-level show-level  ;                : dead  ( -- )  -1 lifes +!  .lifes  ;                          : defeat-tune  ( -- )  100 200 do  i 20 beep  -5 +loop  ;       : defeat  ( -- )  defeat-tune  300 ms  dead  ;                  : victory?  ( -- f )  invaders @ 0=  ;                          : (combat)  ( -- )                                                begin   victory? if  next-level init-combat  then                       break-key? if  quit  then  \ XXX TMP                            drive shoot move-ufo invasion  catastrophe @            until   defeat  ;                                             : combat  ( -- )  init-combat (combat)  ;                       : defeat?  ( f )  lifes @ 0=  ;                                 : game  ( -- )                                                    init-game  begin  combat defeat?  until  game-over  ;         : run  ( -- )  begin  instructions game  again  ;               : .udgs  ( -- )  cr udgs 0 do  i 128 + emit  loop  ;            : ni  ( -- )      next-invader  ;                               : m   ( -- )      move-invader broken-container? home .  ;      : in  ( -- )      init-game init-combat  ;                      : bc  ( -- )                                                      cls                                                             space broken-top-right-container .1x1sprite                     container-top .2x1sprite                                        broken-top-left-container .1x1sprite space cr                   container-bottom .2x1sprite 8 emit 8 emit                       broken-bottom-left-container .1x1sprite                         xy swap 1+ swap at-xy                                           container-bottom .2x1sprite                                     container-bottom .2x1sprite 8 emit                              broken-bottom-right-container .1x1sprite cr  ;                init-level                                                      end-section                                                                                                                     